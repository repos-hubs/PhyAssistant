package com.jibo.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;

import com.jibo.entity.ManufutureBrandInfo;

import com.jibo.entity.ContactManufuture;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table manufuture_info.
*/
public class ContactManufutureDao extends AbstractDao<ContactManufuture, Long> {

    public static final String TABLENAME = "manufucture_info";

    /**
     * Properties of entity ContactManufuture.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property BrandId = new Property(1, String.class, "brandId", false, "brand_id");
        public final static Property ProductInfo = new Property(2, String.class, "productInfo", false, "productintro");
        public final static Property Position = new Property(3, String.class, "position", false, "position");
        public final static Property Intro = new Property(4, String.class, "intro", false, "intro");
        public final static Property Worktime = new Property(5, String.class, "worktime", false, "worktime");
        public final static Property Place = new Property(6, String.class, "place", false, "place");
        public final static Property Chinesename = new Property(7, String.class, "chinesename", false, "chinesename");
        public final static Property Englishname = new Property(8, String.class, "englishname", false, "englishname");
        public final static Property Telphone = new Property(9, String.class, "telphone", false, "telphone");
        public final static Property Phone = new Property(10, String.class, "phone", false, "phone");
        public final static Property Email = new Property(11, String.class, "email", false, "email");
    };

    private DaoSession daoSession;


    public ContactManufutureDao(DaoConfig config) {
        super(config);
    }
    
    public ContactManufutureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'manufucture_info' (" + //
                "'id' INTEGER PRIMARY KEY ," + // 0: id
                "'brand_id' TEXT," + // 1: brandId
                "'productintro' TEXT," + // 2: productInfo
                "'position' TEXT," + // 3: position
                "'intro' TEXT," + // 4: intro
                "'worktime' TEXT," + // 5: worktime
                "'place' TEXT," + // 6: place
                "'chinesename' TEXT," + // 7: chinesename
                "'englishname' TEXT," + // 8: englishname
                "'telphone' TEXT," + // 9: telphone
                "'phone' TEXT," + // 10: phone
                "'email' TEXT);"); // 11: email
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'manufucture_info'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContactManufuture entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String brandId = entity.getBrandId();
        if (brandId != null) {
            stmt.bindString(2, brandId);
        }
 
        String productInfo = entity.getProductInfo();
        if (productInfo != null) {
            stmt.bindString(3, productInfo);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(4, position);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(5, intro);
        }
 
        String worktime = entity.getWorktime();
        if (worktime != null) {
            stmt.bindString(6, worktime);
        }
 
        String place = entity.getPlace();
        if (place != null) {
            stmt.bindString(7, place);
        }
 
        String chinesename = entity.getChinesename();
        if (chinesename != null) {
            stmt.bindString(8, chinesename);
        }
 
        String englishname = entity.getEnglishname();
        if (englishname != null) {
            stmt.bindString(9, englishname);
        }
 
        String telphone = entity.getTelphone();
        if (telphone != null) {
            stmt.bindString(10, telphone);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(12, email);
        }
    }

    @Override
    protected void attachEntity(ContactManufuture entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContactManufuture readEntity(Cursor cursor, int offset) {
        ContactManufuture entity = new ContactManufuture( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // brandId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // productInfo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // position
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // intro
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // worktime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // place
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // chinesename
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // englishname
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // telphone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // email
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContactManufuture entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBrandId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProductInfo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPosition(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIntro(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWorktime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlace(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChinesename(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEnglishname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTelphone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEmail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContactManufuture entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContactManufuture entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getManufutureBrandInfoDao().getAllColumns());
            builder.append(" FROM manufuture_info T");
            builder.append(" LEFT JOIN manufucture_brand_info T0 ON T.'brand_id'=T0.'brand_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ContactManufuture loadCurrentDeep(Cursor cursor, boolean lock) {
        ContactManufuture entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ManufutureBrandInfo manufutureBrandInfo = loadCurrentOther(daoSession.getManufutureBrandInfoDao(), cursor, offset);
        entity.setManufutureBrandInfo(manufutureBrandInfo);

        return entity;    
    }

    public ContactManufuture loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ContactManufuture> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ContactManufuture> list = new ArrayList<ContactManufuture>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ContactManufuture> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ContactManufuture> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
