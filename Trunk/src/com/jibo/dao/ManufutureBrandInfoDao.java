package com.jibo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.jibo.entity.ManufutureBrandInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table manufucture_brand_info.
*/
public class ManufutureBrandInfoDao extends AbstractDao<ManufutureBrandInfo, String> {

    public static final String TABLENAME = "manufucture_brand_info";

    /**
     * Properties of entity ManufutureBrandInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BrandId = new Property(0, String.class, "brandId", true, "brand_id");
        public final static Property ProductId = new Property(1, String.class, "productId", false, "product_id");
        public final static Property GeneralName = new Property(2, String.class, "generalName", false, "general_name");
        public final static Property ZyName = new Property(3, String.class, "zyName", false, "zyname");
        public final static Property EnName = new Property(4, String.class, "enName", false, "enname");
        public final static Property PyName = new Property(5, String.class, "pyName", false, "pyname");
        public final static Property Indication = new Property(6, String.class, "indication", false, "indication");
        public final static Property Contraindication = new Property(7, String.class, "contraindication", false, "contraindication");
        public final static Property BrandName = new Property(8, String.class, "brandName", false, "brand_name");
        public final static Property BrandNameEn = new Property(9, String.class, "brandNameEn", false, "brand_name_en");
        public final static Property MncId = new Property(10, String.class, "mncId", false, "mnc_id");
        public final static Property OtherInfo = new Property(11, String.class, "otherInfo", false, "other_info");
        public final static Property ManufacturerNameCn = new Property(12, String.class, "manufacturerNameCn", false, "manufacturer_name_cn");
        public final static Property ManufacturerNameEn = new Property(13, String.class, "manufacturerNameEn", false, "manufacturer_name_en");
    };


    public ManufutureBrandInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ManufutureBrandInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'manufucture_brand_info' (" + //
                "'brand_id' TEXT PRIMARY KEY NOT NULL ," + // 0: brandId
                "'product_id' TEXT," + // 1: productId
                "'general_name' TEXT," + // 2: generalName
                "'zyname' TEXT," + // 3: zyName
                "'enname' TEXT," + // 4: enName
                "'pyname' TEXT," + // 5: pyName
                "'indication' TEXT," + // 6: indication
                "'contraindication' TEXT," + // 7: contraindication
                "'brand_name' TEXT," + // 8: brandName
                "'brand_name_en' TEXT," + // 9: brandNameEn
                "'mnc_id' TEXT," + // 10: mncId
                "'other_info' TEXT," + // 11: otherInfo
                "'manufacturer_name_cn' TEXT," + // 12: manufacturerNameCn
                "'manufacturer_name_en' TEXT);"); // 13: manufacturerNameEn
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'manufucture_brand_info'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ManufutureBrandInfo entity) {
        stmt.clearBindings();
 
        String brandId = entity.getBrandId();
        if (brandId != null) {
            stmt.bindString(1, brandId);
        }
 
        String productId = entity.getProductId();
        if (productId != null) {
            stmt.bindString(2, productId);
        }
 
        String generalName = entity.getGeneralName();
        if (generalName != null) {
            stmt.bindString(3, generalName);
        }
 
        String zyName = entity.getZyName();
        if (zyName != null) {
            stmt.bindString(4, zyName);
        }
 
        String enName = entity.getEnName();
        if (enName != null) {
            stmt.bindString(5, enName);
        }
 
        String pyName = entity.getPyName();
        if (pyName != null) {
            stmt.bindString(6, pyName);
        }
 
        String indication = entity.getIndication();
        if (indication != null) {
            stmt.bindString(7, indication);
        }
 
        String contraindication = entity.getContraindication();
        if (contraindication != null) {
            stmt.bindString(8, contraindication);
        }
 
        String brandName = entity.getBrandName();
        if (brandName != null) {
            stmt.bindString(9, brandName);
        }
 
        String brandNameEn = entity.getBrandNameEn();
        if (brandNameEn != null) {
            stmt.bindString(10, brandNameEn);
        }
 
        String mncId = entity.getMncId();
        if (mncId != null) {
            stmt.bindString(11, mncId);
        }
 
        String otherInfo = entity.getOtherInfo();
        if (otherInfo != null) {
            stmt.bindString(12, otherInfo);
        }
 
        String manufacturerNameCn = entity.getManufacturerNameCn();
        if (manufacturerNameCn != null) {
            stmt.bindString(13, manufacturerNameCn);
        }
 
        String manufacturerNameEn = entity.getManufacturerNameEn();
        if (manufacturerNameEn != null) {
            stmt.bindString(14, manufacturerNameEn);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ManufutureBrandInfo readEntity(Cursor cursor, int offset) {
        ManufutureBrandInfo entity = new ManufutureBrandInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // brandId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // productId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // generalName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zyName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // enName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pyName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // indication
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // contraindication
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // brandName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // brandNameEn
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mncId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // otherInfo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // manufacturerNameCn
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // manufacturerNameEn
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ManufutureBrandInfo entity, int offset) {
        entity.setBrandId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProductId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGeneralName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZyName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEnName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPyName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIndication(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContraindication(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBrandName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBrandNameEn(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMncId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOtherInfo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setManufacturerNameCn(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setManufacturerNameEn(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ManufutureBrandInfo entity, long rowId) {
        return entity.getBrandId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ManufutureBrandInfo entity) {
        if(entity != null) {
            return entity.getBrandId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
