package com.jibo.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.jibo.entity.Formula;
import com.jibo.entity.FormulaCategory;

import com.jibo.entity.CategoryFormulaMapping;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table category_formula_mapping.
*/
public class CategoryFormulaMappingDao extends AbstractDao<CategoryFormulaMapping, Integer> {

    public static final String TABLENAME = "category_formula_mapping";

    /**
     * Properties of entity CategoryFormulaMapping.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "id");
        public final static Property CategoryId = new Property(1, int.class, "categoryId", false, "CATEGORY_ID");
        public final static Property FormulaId = new Property(2, int.class, "formulaId", false, "FORMULA_ID");
        public final static Property Order = new Property(3, Integer.class, "order", false, "FORDER");
    };

    private DaoSession daoSession;

    private Query<CategoryFormulaMapping> formulaCategory_CategoryFormulaMappingListQuery;

    public CategoryFormulaMappingDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryFormulaMappingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'category_formula_mapping' (" + //
                "'id' INTEGER PRIMARY KEY ," + // 0: id
                "'CATEGORY_ID' INTEGER NOT NULL ," + // 1: categoryId
                "'FORMULA_ID' INTEGER NOT NULL ," + // 2: formulaId
                "'FORDER' INTEGER);"); // 3: order
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'category_formula_mapping'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CategoryFormulaMapping entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCategoryId());
        stmt.bindLong(3, entity.getFormulaId());
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(4, order);
        }
    }

    @Override
    protected void attachEntity(CategoryFormulaMapping entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CategoryFormulaMapping readEntity(Cursor cursor, int offset) {
        CategoryFormulaMapping entity = new CategoryFormulaMapping( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // categoryId
            cursor.getInt(offset + 2), // formulaId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // order
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CategoryFormulaMapping entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setCategoryId(cursor.getInt(offset + 1));
        entity.setFormulaId(cursor.getInt(offset + 2));
        entity.setOrder(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(CategoryFormulaMapping entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(CategoryFormulaMapping entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "categoryFormulaMappingList" to-many relationship of FormulaCategory. */
    public synchronized List<CategoryFormulaMapping> _queryFormulaCategory_CategoryFormulaMappingList(int categoryId) {
        if (formulaCategory_CategoryFormulaMappingListQuery == null) {
            QueryBuilder<CategoryFormulaMapping> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.CategoryId.eq(categoryId));
            formulaCategory_CategoryFormulaMappingListQuery = queryBuilder.build();
        } else {
            formulaCategory_CategoryFormulaMappingListQuery.setParameter(0, categoryId);
        }
        return formulaCategory_CategoryFormulaMappingListQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFormulaCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getFormulaDao().getAllColumns());
            builder.append(" FROM category_formula_mapping T");
            builder.append(" LEFT JOIN ");
            builder.append(FormulaCategoryDao.TABLENAME);
            builder.append(" T0 ON T.'CATEGORY_ID'=T0.'id'");
            builder.append(" INNER JOIN ");
            builder.append(FormulaDao.TABLENAME);
            builder.append(" T1 ON T.'FORMULA_ID'=T1.'id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CategoryFormulaMapping loadCurrentDeep(Cursor cursor, boolean lock) {
        CategoryFormulaMapping entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FormulaCategory formulaCategory = loadCurrentOther(daoSession.getFormulaCategoryDao(), cursor, offset);
         if(formulaCategory != null) {
            entity.setFormulaCategory(formulaCategory);
        }
        offset += daoSession.getFormulaCategoryDao().getAllColumns().length;

        Formula formula = loadCurrentOther(daoSession.getFormulaDao(), cursor, offset);
         if(formula != null) {
            entity.setFormula(formula);
        }

        return entity;    
    }

    public CategoryFormulaMapping loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CategoryFormulaMapping> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CategoryFormulaMapping> list = new ArrayList<CategoryFormulaMapping>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CategoryFormulaMapping> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CategoryFormulaMapping> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

 
}
