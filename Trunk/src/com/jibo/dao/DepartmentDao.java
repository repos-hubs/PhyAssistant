package com.jibo.dao;

import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.api.android.GBApp.R;
import com.jibo.entity.CategoryFormulaMapping;
import com.jibo.entity.Department;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table department.
 */
public class DepartmentDao extends AbstractDao<Department, Long> {

	public static final String TABLENAME = "department";

	/**
	 * Properties of entity Department.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "id");
		public final static Property BigDepartmentPinyin = new Property(1,
				String.class, "bigDepartmentPinyin", false, "big_department_jp");
		public final static Property BigDepartment = new Property(2,
				String.class, "bigDepartment", false, "big_department");
		public final static Property Department = new Property(3, String.class,
				"department", false, "department");
	};

	public DepartmentDao(DaoConfig config) {
		super(config);
	}

	public DepartmentDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Department entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String bigDepartmentPinyin = entity.getBigDepartmentPinyin();
		if (bigDepartmentPinyin != null) {
			stmt.bindString(2, bigDepartmentPinyin);
		}

		String bigDepartment = entity.getBigDepartment();
		if (bigDepartment != null) {
			stmt.bindString(3, bigDepartment);
		}

		String department = entity.getDepartment();
		if (department != null) {
			stmt.bindString(4, department);
		}
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Department readEntity(Cursor cursor, int offset) {
		Department entity = new Department(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bigDepartmentPinyin
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bigDepartment
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // department
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Department entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setBigDepartmentPinyin(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setBigDepartment(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setDepartment(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(Department entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Department entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	public ArrayList<String> queryBigDepartment(Context context) {
		Cursor cursor = db.rawQuery(
				"SELECT distinct big_department FROM department", null);
		ArrayList<String> list;
		try {
			int count = cursor.getCount();
			list = new ArrayList<String>(count + 1);
			list.add(context.getString(R.string.category));
			if (cursor.moveToFirst()) {
				if (identityScope != null) {
					identityScope.lock();
					identityScope.reserveRoom(count);
				}
				try {
					do {
						list.add(cursor.getString(0));
					} while (cursor.moveToNext());
				} finally {
					if (identityScope != null) {
						identityScope.unlock();
					}
				}
			}
		} finally {
			cursor.close();
		}
		return list;
	}

}
