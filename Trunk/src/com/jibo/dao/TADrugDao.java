package com.jibo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.jibo.entity.TADrug;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TADrug.
*/
public class TADrugDao extends AbstractDao<TADrug, Void> {

    public static final String TABLENAME = "TADrug";

    /**
     * Properties of entity TADrug.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TaId1 = new Property(0, String.class, "taId1", false, "TA1ID");
        public final static Property TaId2 = new Property(1, String.class, "taId2", false, "TA2ID");
        public final static Property TaId3 = new Property(2, String.class, "taId3", false, "TA3ID");
        public final static Property TaId4 = new Property(3, String.class, "taId4", false, "TA4ID");
        public final static Property ChangeDate = new Property(4, String.class, "changeDate", false, "ChangeDate");
        public final static Property DrugId = new Property(5, String.class, "drugId", false, "DrugID");
    };


    public TADrugDao(DaoConfig config) {
        super(config);
    }
    
    public TADrugDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TADrug' (" + //
                "'TA1ID' TEXT," + // 0: taId1
                "'TA2ID' TEXT," + // 1: taId2
                "'TA3ID' TEXT," + // 2: taId3
                "'TA4ID' TEXT," + // 3: taId4
                "'ChangeDate' TEXT," + // 4: changeDate
                "'DrugID' TEXT);"); // 5: drugId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TADrug'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TADrug entity) {
        stmt.clearBindings();
 
        String taId1 = entity.getTaId1();
        if (taId1 != null) {
            stmt.bindString(1, taId1);
        }
 
        String taId2 = entity.getTaId2();
        if (taId2 != null) {
            stmt.bindString(2, taId2);
        }
 
        String taId3 = entity.getTaId3();
        if (taId3 != null) {
            stmt.bindString(3, taId3);
        }
 
        String taId4 = entity.getTaId4();
        if (taId4 != null) {
            stmt.bindString(4, taId4);
        }
 
        String changeDate = entity.getChangeDate();
        if (changeDate != null) {
            stmt.bindString(5, changeDate);
        }
 
        String drugId = entity.getDrugId();
        if (drugId != null) {
            stmt.bindString(6, drugId);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public TADrug readEntity(Cursor cursor, int offset) {
        TADrug entity = new TADrug( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // taId1
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taId2
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // taId3
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // taId4
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // changeDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // drugId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TADrug entity, int offset) {
        entity.setTaId1(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTaId2(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaId3(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTaId4(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChangeDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDrugId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(TADrug entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(TADrug entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
