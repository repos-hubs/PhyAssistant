package com.jibo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.jibo.entity.FormulationInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FormulationInfo.
*/
public class FormulationInfoDao extends AbstractDao<FormulationInfo, String> {

    public static final String TABLENAME = "FormulationInfo";

    /**
     * Properties of entity FormulationInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "FormulationID");
        public final static Property NameEn = new Property(1, String.class, "nameEn", false, "FormulationEN");
        public final static Property NameCn = new Property(2, String.class, "nameCn", false, "FormulationCN");
        public final static Property ChangeDate = new Property(3, String.class, "changeDate", false, "ChangeDate");
    };


    public FormulationInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FormulationInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FormulationInfo' (" + //
                "'pid' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'FormulationEN' TEXT," + // 1: nameEn
                "'FormulationCN' TEXT," + // 2: nameCn
                "'ChangeDate' TEXT);"); // 3: changeDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FormulationInfo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FormulationInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String nameEn = entity.getNameEn();
        if (nameEn != null) {
            stmt.bindString(2, nameEn);
        }
 
        String nameCn = entity.getNameCn();
        if (nameCn != null) {
            stmt.bindString(3, nameCn);
        }
 
        String changeDate = entity.getChangeDate();
        if (changeDate != null) {
            stmt.bindString(4, changeDate);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FormulationInfo readEntity(Cursor cursor, int offset) {
        FormulationInfo entity = new FormulationInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nameEn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nameCn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // changeDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FormulationInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNameEn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNameCn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChangeDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(FormulationInfo entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(FormulationInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
