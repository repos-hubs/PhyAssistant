package com.jibo.dao;

import java.util.ArrayList;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.text.TextUtils;
import android.util.Log;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;

import com.jibo.entity.AdminRouteInfo;
import com.jibo.entity.CategoryFormulaMapping;
import com.jibo.entity.DrugInfo;
import com.jibo.entity.Formula;
import com.jibo.entity.FormulaCategory;
import com.jibo.entity.TADrug;
import com.jibo.entity.TADrugRef;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table DrugBasicInfo.
 */
public class DrugInfoDao extends AbstractDao<DrugInfo, String> {

	public static final String TABLENAME = "DrugBasicInfo";

	/**
	 * Properties of entity DrugInfo.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, String.class, "id",
				true, "DrugId");
		public final static Property NameEn = new Property(1, String.class,
				"nameEn", false, "DrugNameEN");
		public final static Property NameCn = new Property(2, String.class,
				"nameCn", false, "DrugNameCN");
		public final static Property InsertInfo = new Property(3, String.class,
				"insertInfo", false, "InsertCNInfo");
		public final static Property AhfsInfo = new Property(4, String.class,
				"ahfsInfo", false, "AHFSInfo");
		public final static Property Otc = new Property(5, String.class, "otc",
				false, "OTCInfo");
		public final static Property Tcm = new Property(6, String.class, "tcm",
				false, "TCMInfo");
		public final static Property SalesRank = new Property(7, Float.class,
				"salesRank", false, "SalesRank");
		public final static Property ChangeDate = new Property(8, String.class,
				"changeDate", false, "ChangeDate");
	};

	private DaoSession daoSession;

	public DrugInfoDao(DaoConfig config) {
		super(config);
	}

	public DrugInfoDao(DaoConfig config, DaoSession dataSession) {
		super(config, dataSession);
		this.daoSession = dataSession;
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, DrugInfo entity) {
		stmt.clearBindings();

		String id = entity.getId();
		if (id != null) {
			stmt.bindString(1, id);
		}

		String nameEn = entity.getNameEn();
		if (nameEn != null) {
			stmt.bindString(2, nameEn);
		}

		String nameCn = entity.getNameCn();
		if (nameCn != null) {
			stmt.bindString(3, nameCn);
		}

		String insertInfo = entity.getInsertInfo();
		if (insertInfo != null) {
			stmt.bindString(4, insertInfo);
		}

		String ahfs = entity.getAhfsInfo();
		if (ahfs != null) {
			stmt.bindString(5, ahfs);
		}

		String otc = entity.getOtc();
		if (otc != null) {
			stmt.bindString(5, otc);
		}

		String tcm = entity.getTcm();
		if (tcm != null) {
			stmt.bindString(6, tcm);
		}

		Float salesRank = entity.getSalesRank();
		if (salesRank != null) {
			stmt.bindDouble(7, salesRank);
		}

		String changeDate = entity.getChangeDate();
		if (changeDate != null) {
			stmt.bindString(8, changeDate);
		}
	}

	@Override
	protected void attachEntity(DrugInfo entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public String readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public DrugInfo readEntity(Cursor cursor, int offset) {
		DrugInfo entity = new DrugInfo(
				cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nameCn
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nameEn
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // insertinfo
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ahfs
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // otc
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tcm
				cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // salesRank
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // changeDate
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, DrugInfo entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getString(offset + 0));
		entity.setNameEn(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setNameCn(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setInsertInfo(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setAhfsInfo(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setOtc(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setTcm(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setSalesRank(cursor.isNull(offset + 7) ? null : cursor
				.getFloat(offset + 7));
		entity.setChangeDate(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
	}

	/** @inheritdoc */
	@Override
	protected String updateKeyAfterInsert(DrugInfo entity, long rowId) {
		return entity.getId();
	}

	/** @inheritdoc */
	@Override
	public String getKey(DrugInfo entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	public static final int DB_ROW_COUNT = 24;

	/***
	 * 由于原sql查询速度极慢，借用临时表DrugList，目前已经在原db里生成，也可以动态产生，以下是脚本
	 * 
	 * drop table IF EXISTS DrugList;
	 * 
	 * create table DrugList ('DrugID' TEXT,'DrugNameEN' TEXT,'DrugNameCN'
	 * TEXT,'InsertCNInfo' TEXT,'AHFSInfo' TEXT,'OTCInfo' TEXT,'TCMInfo'
	 * TEXT,'SalesRank' REAL,'ChangeDate' TEXT, 'AdminRouteID' TEXT,
	 * 'AdminRouteEN' TEXT,'AdminRouteCN' TEXT,'count' INTEGER);
	 * 
	 * INSERT INTO DrugList select d.* ,
	 * a.AdminRouteID,a.AdminRouteEN,a.AdminRouteCN ,(select cr.countRoute from
	 * (SELECT InsertBasicInfo.DrugID DrugID,count(DISTINCT
	 * InsertBasicInfo.AdminRouteID) countRoute FROM InsertBasicInfo GROUP BY
	 * InsertBasicInfo.DrugID) cr WHERE cr.DrugID = d.DrugID) from DrugBasicInfo
	 * d LEFT JOIN (SELECT distinct DrugID, AdminRouteID FROM InsertBasicInfo) i
	 * on d.DrugID = i.DrugID LEFT JOIN AdminRouteInfo a on i.AdminRouteID =
	 * a.AdminRouteID order by d.SalesRank;
	 * 
	 * @param isSearch
	 *            是否搜索
	 * @return
	 */
	protected String getSelectDeep(boolean isSearch) {
		StringBuilder builder = new StringBuilder("SELECT ");
		
		builder.append(" d.* from DrugList d");
		
		if (isSearch) {// 搜索关键字
			builder.append(" where d.DrugID in (select DISTINCT DrugID from SearchDictionary where AlternativeName like ?)");
		}
		builder.append(" limit ? ,");
		builder.append(DB_ROW_COUNT);
		return builder.toString();
	}

	/***
	 * 解析Cursor信息，封装数据bean
	 * 
	 * @param cursor
	 * @param isBycategory
	 *            是否包含类别信息(第四级分类(TA4ID))
	 * @return
	 */
	protected DrugInfo loadCurrentDeep(Cursor cursor, boolean isBycategory) {
		DrugInfo entity = readEntity(cursor, 0);
		attachEntity(entity);
		int offset = getAllColumns().length;
		// AdminRouteInfo adminRouteInfo = loadCurrentOther(
		// daoSession.getAdminRouteInfoDao(), cursor, offset);

		String adminRouteId = cursor.getString(offset++);
		if (!TextUtils.isEmpty(adminRouteId)) {
			AdminRouteInfo adminRouteInfo = new AdminRouteInfo();
			adminRouteInfo.setId(adminRouteId);
			adminRouteInfo.setNameEn(cursor.getString(offset++));
			adminRouteInfo.setNameCn(cursor.getString(offset++));
			entity.setAdminRouteInfo(adminRouteInfo);
		}

		String countString = cursor.getString(offset++);
		entity.setCount(TextUtils.isEmpty(countString) ? 0 : Integer
				.parseInt(countString));

		if (isBycategory) {
			TADrugRef taDrugRef = loadCurrentOther(
					daoSession.gettADrugRefDao(), cursor, offset);
			if (null != taDrugRef)
				entity.setTaDrugRef(taDrugRef);
		}

		return entity;
	}

	/**
	 * Reads all available rows from the given cursor and returns a list of new
	 * ImageTO objects.
	 */
	public List<DrugInfo> loadAllDeepFromCursor(Cursor cursor,
			boolean isByCategory) {
		List<DrugInfo> list = new ArrayList<DrugInfo>();
		long time = System.currentTimeMillis();
		if (cursor.moveToFirst()) {
			do {
				list.add(loadCurrentDeep(cursor, isByCategory));
			} while (cursor.moveToNext());
		}
		Log.i("simon", ((System.currentTimeMillis() - time) / 1000)
				+ "秒__------耗时");
		return list;
	}

	protected List<DrugInfo> loadDeepAllAndCloseCursor(Cursor cursor,
			boolean isByCategory) {
		try {
			return loadAllDeepFromCursor(cursor, isByCategory);
		} finally {
			cursor.close();
		}
	}

	/***
	 *  获取药品信息
	 * @param drugId 药品id
	 * @param adminRouteId 给药途径id
	 * @return
	 */
	public DrugInfo queryDeep(String drugId,String adminRouteId) {
		String sql = "SELECT * from DrugList where DrugID = ?";
		String[] params = null;
		if(!TextUtils.isEmpty(adminRouteId)){
			sql+=" and AdminRouteID = ?";
			params = new String[] { drugId ,adminRouteId};
		}else{
			params = new String[] { drugId};
		}
		
		Cursor cursor = db.rawQuery(sql,params);
		List<DrugInfo> list = loadDeepAllAndCloseCursor(cursor, false);
		if (list != null && list.size() > 0) {
			return list.get(0);
		}
		
		return null;
	}

	/***
	 * 普通查询
	 * 
	 * @param pageNumber
	 *            页码
	 * @param searchKey
	 *            关键字模糊搜索
	 * @return
	 */
	public List<DrugInfo> queryDeep(int pageNumber, String searchKey) {
		String sql = null;
		String[] selectionArg = null;
		String limitIndex = "" + (pageNumber * DB_ROW_COUNT);
		if (!TextUtils.isEmpty(searchKey)) {
			sql = getSelectDeep(true);
			selectionArg = new String[] { "%" + searchKey + "%", limitIndex };
		} else {
			sql = getSelectDeep(false);
			selectionArg = new String[] { limitIndex };
		}
		Cursor cursor = db.rawQuery(sql, selectionArg);
		return loadDeepAllAndCloseCursor(cursor, false);
	}

	/**
	 * 根据分类信息查询
	 * 
	 * @param pageNumber
	 *            页码
	 * @param taid
	 *            分类ID(第三级分类)
	 * @return
	 */
	public List<DrugInfo> queryDeepByTa(String ta1id,String ta3id) {

		/**
		 * 原查表sql如下，由于效率极低，放弃! order by和join造成效率低下,放弃分页
		 */

		// String sql = "select  d.*,tr.* from DrugList d  join " +
		// "(select drugid,ta4id from TADrug where ta3id = ? order by ta4id desc) t  "
		// +
		// "on  d.drugid = t.drugid left join " +
		// "TADrugRef tr on t.ta4id = tr.taid limit ? ,"
		// + DB_ROW_COUNT;
		// String limitIndex = "" + (pageNumber * DB_ROW_COUNT);
		// String[] selectionArg = new String[] { taid, limitIndex };
		// Cursor cursor = db.rawQuery(sql, selectionArg);
		// return loadDeepAllAndCloseCursor(cursor, true);

		if (TextUtils.isEmpty(ta3id))
			return null;

		List<TADrug> list = daoSession.gettADrugDao().queryBuilder()
				.where(TADrugDao.Properties.TaId1.eq(ta1id),TADrugDao.Properties.TaId3.eq(ta3id))
				.orderAsc(TADrugDao.Properties.TaId4).list();
		List<DrugInfo> drugList = null;
		if (null != list) {
			String drugSql = "select * from DrugList where DrugID = ?";
			String[] selectionArg = new String[1];
			drugList = new ArrayList<DrugInfo>();
			for (TADrug taObj : list) {
				selectionArg[0] = taObj.getDrugId();
				List<DrugInfo> tempList = loadDeepAllAndCloseCursor(
						db.rawQuery(drugSql, selectionArg), false);
				for (DrugInfo info : tempList) {
					TADrugRef taRef = daoSession.gettADrugRefDao().load(
							taObj.getTaId4());
					if (null != taRef) {
						info.setTaDrugRef(taRef);
					}
				}

				drugList.addAll(tempList);
			}
		}

		return drugList;
	}

}
