package com.jibo.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.text.TextUtils;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.jibo.common.SharedPreferencesMgr;
import com.jibo.entity.DptRelation;
import com.jibo.entity.FormulaCategory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table dpt_replation.
 */
public class DptRelationDao extends AbstractDao<DptRelation, String> {

	public static final String TABLENAME = "dpt_replation";

	/**
	 * Properties of entity DptRelation.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Department = new Property(0, String.class,
				"department", true, "department");
		public final static Property CalculatorId = new Property(1,
				Integer.class, "calculatorId", false, "calculator_id");
		public final static Property CalculatorCategory = new Property(2,
				String.class, "calculatorCategory", false,
				"calculator_category");
		public final static Property DrugCategory = new Property(3,
				String.class, "drugCategory", false, "drug_id");
		public final static Property DrugCategoryId = new Property(4,
				String.class, "drugCategoryId", false, "drug_category");
		public final static Property ArticleCategory = new Property(5,
				String.class, "articleCategory", false, "article_id");
		public final static Property ArticleCategoryId = new Property(6,
				String.class, "articleCategoryId", false, "article_category");
	};

	public DptRelationDao(DaoConfig config) {
		super(config);
	}

	public DptRelationDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, DptRelation entity) {
		stmt.clearBindings();

		String department = entity.getDepartment();
		if (department != null) {
			stmt.bindString(1, department);
		}

		Integer calculatorId = entity.getCalculatorId();
		if (calculatorId != null) {
			stmt.bindLong(2, calculatorId);
		}

		String calculatorCategory = entity.getCalculatorCategory();
		if (calculatorCategory != null) {
			stmt.bindString(3, calculatorCategory);
		}

		String drugCategory = entity.getDrugCategory();
		if (drugCategory != null) {
			stmt.bindString(4, calculatorCategory);
		}

		String drugCategoryId = entity.getDrugCategoryId();
		if (drugCategoryId != null) {
			stmt.bindString(5, drugCategoryId);
		}

		String articleCategory = entity.getArticleCategory();
		if (articleCategory != null) {
			stmt.bindString(6, articleCategory);
		}

		String articleCategoryId = entity.getArticleCategoryId();
		if (articleCategoryId != null) {
			stmt.bindString(7, articleCategoryId);
		}
	}

	/** @inheritdoc */
	@Override
	public String readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public DptRelation readEntity(Cursor cursor, int offset) {
		DptRelation entity = new DptRelation(
				cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // department
				cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // calculatorCategoryId
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // calculatorCategoryName
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // drugCategoryName
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // drugCategoryId
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 5),// articleCategoryName
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 6));// articleCategoryId
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, DptRelation entity, int offset) {
		entity.setDepartment(cursor.isNull(offset + 0) ? null : cursor
				.getString(offset + 0));
		entity.setCalculatorId(cursor.isNull(offset + 1) ? null : cursor
				.getInt(offset + 1));
		entity.setCalculatorCategory(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setDrugCategory(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setDrugCategoryId(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setArticleCategory(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setArticleCategoryId(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
	}

	/** @inheritdoc */
	@Override
	protected String updateKeyAfterInsert(DptRelation entity, long rowId) {
		return entity.getDepartment();
	}

	/** @inheritdoc */
	@Override
	public String getKey(DptRelation entity) {
		if (entity != null) {
			return entity.getDepartment();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/***
	 * 获取科室对应的医学公式分类
	 * 
	 * @return
	 */
	public FormulaCategory getFormulaCategory() {
		String departMent = SharedPreferencesMgr.getDept();
		FormulaCategory entity = null;
		if (!TextUtils.isEmpty(departMent)) {
			DptRelation dptObj = load(departMent);
			if (null != dptObj) {
				if (!TextUtils.isEmpty(dptObj.getCalculatorCategory())) {
					entity = new FormulaCategory();
					entity.setId(dptObj.getCalculatorId());
					entity.setName(dptObj.getCalculatorCategory());
				}
			}
		}
		return entity;
	}
}
