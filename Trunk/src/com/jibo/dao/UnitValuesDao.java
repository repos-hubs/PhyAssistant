package com.jibo.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.jibo.entity.UnitValues;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table unit_values.
*/
public class UnitValuesDao extends AbstractDao<UnitValues, Integer> {

    public static final String TABLENAME = "unit_values";

    /**
     * Properties of entity UnitValues.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "id");
        public final static Property UnitId = new Property(1, Integer.class, "unitId", false, "unit_id");
        public final static Property Type = new Property(2, Integer.class, "type", false, "type");
        public final static Property ValueCn = new Property(3, String.class, "valueCn", false, "value_cn");
        public final static Property ValueEn = new Property(4, String.class, "valueEn", false, "value_en");
        public final static Property Key = new Property(5, String.class, "key", false, "key");
    };

    private Query<UnitValues> units_UnitValuesListQuery;

    public UnitValuesDao(DaoConfig config) {
        super(config);
    }
    
    public UnitValuesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'unit_values' (" + //
                "'id' INTEGER PRIMARY KEY ," + // 0: id
                "'unit_id' INTEGER," + // 1: unitId
                "'type' INTEGER," + // 2: type
                "'value_cn' TEXT," + // 3: valueCn
                "'value_en' TEXT," + // 4: valueEn
                "'key' TEXT);"); // 5: key
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'unit_values'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UnitValues entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer unitId = entity.getUnitId();
        if (unitId != null) {
            stmt.bindLong(2, unitId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        String valueCn = entity.getValueCn();
        if (valueCn != null) {
            stmt.bindString(4, valueCn);
        }
 
        String valueEn = entity.getValueEn();
        if (valueEn != null) {
            stmt.bindString(5, valueEn);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(6, key);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UnitValues readEntity(Cursor cursor, int offset) {
        UnitValues entity = new UnitValues( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // unitId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // valueCn
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // valueEn
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // key
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UnitValues entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setUnitId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setValueCn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValueEn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(UnitValues entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(UnitValues entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "unitValuesList" to-many relationship of Units. */
    public synchronized List<UnitValues> _queryUnits_UnitValuesList(Integer unitId) {
        if (units_UnitValuesListQuery == null) {
            QueryBuilder<UnitValues> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.UnitId.eq(unitId));
            units_UnitValuesListQuery = queryBuilder.build();
        } else {
            units_UnitValuesListQuery.setParameter(0, unitId);
        }
        return units_UnitValuesListQuery.list();
    }

}
