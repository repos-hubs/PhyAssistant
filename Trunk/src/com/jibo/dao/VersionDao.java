package com.jibo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.jibo.entity.Version;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table version.
 * 
 * 数据库版本表
 * 
*/
public class VersionDao extends AbstractDao<Version, Void> {

    public static final String TABLENAME = "version";

    /**
     * Properties of entity Version.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property VersionCode = new Property(0, String.class, "versionCode", false, "version_code");
        public final static Property PatchVersionCode = new Property(1, String.class, "patchVersionCode", false, "patch_version_code");
    };


    public VersionDao(DaoConfig config) {
        super(config);
    }
    
    public VersionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'version' (" + //
                "'version_code' TEXT," + // 0: versionCode
                "'patch_version_code' TEXT);"); // 1: patchVersionCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'version'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Version entity) {
        stmt.clearBindings();
 
        String versionCode = entity.getVersionCode();
        if (versionCode != null) {
            stmt.bindString(1, versionCode);
        }
 
        String patchVersionCode = entity.getPatchVersionCode();
        if (patchVersionCode != null) {
            stmt.bindString(2, patchVersionCode);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Version readEntity(Cursor cursor, int offset) {
        Version entity = new Version( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // versionCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // patchVersionCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Version entity, int offset) {
        entity.setVersionCode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPatchVersionCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Version entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Version entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
