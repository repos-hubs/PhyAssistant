package com.jibo.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.jibo.entity.CalcSearch;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table calc_searchtag.
*/
public class CalcSearchDao extends AbstractDao<CalcSearch, Integer> {

    public static final String TABLENAME = "calc_searchtag";

    /**
     * Properties of entity CalcSearch.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "id");
        public final static Property CalMobile = new Property(1, String.class, "calMobile", false, "calMobile");
        public final static Property KeyWord = new Property(2, String.class, "keyWord", false, "CALKEYWORD");
    };

    private Query<CalcSearch> formula_CalcSearchListQuery;

    public CalcSearchDao(DaoConfig config) {
        super(config);
    }
    
    public CalcSearchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'calc_searchtag' (" + //
                "'id' INTEGER PRIMARY KEY ," + // 0: id
                "'calMobile' TEXT," + // 1: calMobile
                "'CALKEYWORD' TEXT);"); // 2: keyWord
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'calc_searchtag'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CalcSearch entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String calMobile = entity.getCalMobile();
        if (calMobile != null) {
            stmt.bindString(2, calMobile);
        }
 
        String keyWord = entity.getKeyWord();
        if (keyWord != null) {
            stmt.bindString(3, keyWord);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CalcSearch readEntity(Cursor cursor, int offset) {
        CalcSearch entity = new CalcSearch( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // calMobile
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // keyWord
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CalcSearch entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setCalMobile(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKeyWord(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(CalcSearch entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(CalcSearch entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "calcSearchList" to-many relationship of Formula. */
    public synchronized List<CalcSearch> _queryFormula_CalcSearchList(Integer id) {
        if (formula_CalcSearchListQuery == null) {
            QueryBuilder<CalcSearch> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Id.eq(id));
            formula_CalcSearchListQuery = queryBuilder.build();
        } else {
            formula_CalcSearchListQuery.setParameter(0, id);
        }
        return formula_CalcSearchListQuery.list();
    }

}
