package com.jibo.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.jibo.entity.Units;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table units.
*/
public class UnitsDao extends AbstractDao<Units, Integer> {

    public static final String TABLENAME = "units";

    /**
     * Properties of entity Units.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "id");
        public final static Property NameCn = new Property(1, String.class, "nameCn", false, "name_cn");
        public final static Property Round = new Property(2, Integer.class, "round", false, "round");
        public final static Property Max = new Property(3, Integer.class, "max", false, "max");
        public final static Property Min = new Property(4, Integer.class, "min", false, "min");
        public final static Property FormulaId = new Property(5, Integer.class, "formulaId", false, "formula_id");
        public final static Property Order = new Property(6, Integer.class, "order", false, "uOrder");
        public final static Property Type = new Property(7, Integer.class, "type", false, "uType");
        public final static Property NameEn = new Property(8, Integer.class, "nameEn", false, "name_en");
    };

    private DaoSession daoSession;

    private Query<Units> formula_UnitsListQuery;

    public UnitsDao(DaoConfig config) {
        super(config);
    }
    
    public UnitsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'units' (" + //
                "'id' INTEGER PRIMARY KEY ," + // 0: id
                "'name_cn' TEXT NOT NULL ," + // 1: nameCn
                "'round' INTEGER," + // 2: round
                "'max' INTEGER," + // 3: max
                "'min' INTEGER," + // 4: min
                "'formula_id' INTEGER," + // 5: formulaId
                "'uOrder' INTEGER," + // 6: order
                "'uType' INTEGER," + // 7: type
                "'name_en' INTEGER);"); // 8: nameEn
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'units'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Units entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNameCn());
 
        Integer round = entity.getRound();
        if (round != null) {
            stmt.bindLong(3, round);
        }
 
        Integer max = entity.getMax();
        if (max != null) {
            stmt.bindLong(4, max);
        }
 
        Integer min = entity.getMin();
        if (min != null) {
            stmt.bindLong(5, min);
        }
 
        Integer formulaId = entity.getFormulaId();
        if (formulaId != null) {
            stmt.bindLong(6, formulaId);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(7, order);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(8, type);
        }
 
        Integer nameEn = entity.getNameEn();
        if (nameEn != null) {
            stmt.bindLong(9, nameEn);
        }
    }

    @Override
    protected void attachEntity(Units entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Units readEntity(Cursor cursor, int offset) {
        Units entity = new Units( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.getString(offset + 1), // nameCn
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // round
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // max
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // min
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // formulaId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // order
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // nameEn
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Units entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setNameCn(cursor.getString(offset + 1));
        entity.setRound(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMax(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMin(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFormulaId(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setOrder(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setNameEn(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(Units entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(Units entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "unitsList" to-many relationship of Formula. */
    public synchronized List<Units> _queryFormula_UnitsList(Integer formulaId) {
        if (formula_UnitsListQuery == null) {
            QueryBuilder<Units> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.FormulaId.eq(formulaId));
            queryBuilder.orderRaw("uOrder ASC");
            formula_UnitsListQuery = queryBuilder.build();
        } else {
            formula_UnitsListQuery.setParameter(0, formulaId);
        }
        return formula_UnitsListQuery.list();
    }

}
