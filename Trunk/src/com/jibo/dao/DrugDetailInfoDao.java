package com.jibo.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;

import com.jibo.entity.AdminRouteInfo;
import com.jibo.entity.BrandInfo;
import com.jibo.entity.CompanyInfo;
import com.jibo.entity.DrugInfo;
import com.jibo.entity.FormulationInfo;

import com.jibo.entity.DrugDetailInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table InsertBasicInfo.
*/
public class DrugDetailInfoDao extends AbstractDao<DrugDetailInfo, String> {

    public static final String TABLENAME = "InsertBasicInfo";

    /**
     * Properties of entity DrugDetailInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "InsertID");
        public final static Property SourceId = new Property(1, String.class, "sourceId", false, "SourceID");
        public final static Property DrugId = new Property(2, String.class, "drugId", false, "DrugID");
        public final static Property BrandId = new Property(3, String.class, "brandId", false, "BrandID");
        public final static Property CompanyId = new Property(4, String.class, "companyId", false, "CompanyID");
        public final static Property AdminRouteID = new Property(5, String.class, "adminRouteID", false, "AdminRouteID");
        public final static Property FormulationID = new Property(6, String.class, "formulationID", false, "FormulationID");
        public final static Property Specification = new Property(7, String.class, "specification", false, "Specification");
        public final static Property ChangeDate = new Property(8, String.class, "changeDate", false, "ChangeDate");
    };

    private DaoSession daoSession;


    public DrugDetailInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DrugDetailInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'InsertBasicInfo' (" + //
                "'InsertID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'SourceID' TEXT," + // 1: sourceId
                "'DrugID' TEXT," + // 2: drugId
                "'BrandID' TEXT," + // 3: brandId
                "'CompanyID' TEXT," + // 4: companyId
                "'AdminRouteID' TEXT," + // 5: adminRouteID
                "'FormulationID' TEXT," + // 6: formulationID
                "'Specification' TEXT," + // 7: specification
                "'ChangeDate' TEXT);"); // 8: changeDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'InsertBasicInfo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DrugDetailInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String sourceId = entity.getSourceId();
        if (sourceId != null) {
            stmt.bindString(2, sourceId);
        }
 
        String drugId = entity.getDrugId();
        if (drugId != null) {
            stmt.bindString(3, drugId);
        }
 
        String brandId = entity.getBrandId();
        if (brandId != null) {
            stmt.bindString(4, brandId);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(5, companyId);
        }
 
        String adminRouteID = entity.getAdminRouteID();
        if (adminRouteID != null) {
            stmt.bindString(6, adminRouteID);
        }
 
        String formulationID = entity.getFormulationID();
        if (formulationID != null) {
            stmt.bindString(7, formulationID);
        }
 
        String specification = entity.getSpecification();
        if (specification != null) {
            stmt.bindString(8, specification);
        }
 
        String changeDate = entity.getChangeDate();
        if (changeDate != null) {
            stmt.bindString(9, changeDate);
        }
    }

    @Override
    protected void attachEntity(DrugDetailInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DrugDetailInfo readEntity(Cursor cursor, int offset) {
        DrugDetailInfo entity = new DrugDetailInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sourceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // drugId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // brandId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // companyId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // adminRouteID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // formulationID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // specification
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // changeDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DrugDetailInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSourceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDrugId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBrandId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompanyId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdminRouteID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFormulationID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSpecification(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChangeDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DrugDetailInfo entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DrugDetailInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCompanyInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getAdminRouteInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getFormulationInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getBrandInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getDrugInfoDao().getAllColumns());
            builder.append(" FROM InsertBasicInfo T");
            builder.append(" LEFT JOIN CompanyInfo T0 ON T.'CompanyID'=T0.'CompanyID'");
            builder.append(" LEFT JOIN AdminRouteInfo T1 ON T.'AdminRouteID'=T1.'AdminRouteID'");
            builder.append(" LEFT JOIN FormulationInfo T2 ON T.'FormulationID'=T2.'pid'");
            builder.append(" LEFT JOIN BrandInfo T3 ON T.'BrandID'=T3.'BrandID'");
            builder.append(" LEFT JOIN DrugBasicInfo T4 ON T.'DrugID'=T4.'DrugId'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DrugDetailInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        DrugDetailInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CompanyInfo companyInfo = loadCurrentOther(daoSession.getCompanyInfoDao(), cursor, offset);
        entity.setCompanyInfo(companyInfo);
        offset += daoSession.getCompanyInfoDao().getAllColumns().length;

        AdminRouteInfo adminRouteInfo = loadCurrentOther(daoSession.getAdminRouteInfoDao(), cursor, offset);
        entity.setAdminRouteInfo(adminRouteInfo);
        offset += daoSession.getAdminRouteInfoDao().getAllColumns().length;

        FormulationInfo formulationInfo = loadCurrentOther(daoSession.getFormulationInfoDao(), cursor, offset);
        entity.setFormulationInfo(formulationInfo);
        offset += daoSession.getFormulationInfoDao().getAllColumns().length;

        BrandInfo brandInfo = loadCurrentOther(daoSession.getBrandInfoDao(), cursor, offset);
        entity.setBrandInfo(brandInfo);
        offset += daoSession.getBrandInfoDao().getAllColumns().length;

        DrugInfo drugInfo = loadCurrentOther(daoSession.getDrugInfoDao(), cursor, offset);
        entity.setDrugInfo(drugInfo);

        return entity;    
    }

    public DrugDetailInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DrugDetailInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DrugDetailInfo> list = new ArrayList<DrugDetailInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DrugDetailInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DrugDetailInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
