package com.jibo.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.text.TextUtils;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.DaoException;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.jibo.entity.CompanyInfo;

import com.jibo.entity.BrandInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BrandInfo.
*/
public class BrandInfoDao extends AbstractDao<BrandInfo, String> {

    public static final String TABLENAME = "BrandInfo";

    /**
     * Properties of entity BrandInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "BrandID");
        public final static Property NameCn = new Property(1, String.class, "nameCn", false, "BrandNameCN");
        public final static Property NameEn = new Property(2, String.class, "nameEn", false, "BrandNameEN");
        public final static Property DrugId = new Property(3, String.class, "drugId", false, "DrugID");
        public final static Property CompanyId = new Property(4, String.class, "companyId", false, "CompanyID");
        public final static Property AdminRouteId = new Property(5, String.class, "adminRouteId", false, "AdminRouteID");
        public final static Property FormulationId = new Property(6, String.class, "formulationId", false, "FormulationID");
        public final static Property OrderDate = new Property(7, String.class, "orderDate", false, "FirstApprovalDate");
        public final static Property ChangeDate = new Property(8, String.class, "changeDate", false, "ChangeDate");
        
    };

    private DaoSession daoSession;

    private Query<BrandInfo> drugInfo_BrandInfoListQuery;
    private Query<BrandInfo> drugInfo_BrandInfoListQuery1;

    public BrandInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BrandInfoDao(DaoConfig config, DaoSession dataSession) {
        super(config, dataSession);
        this.daoSession = dataSession;
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BrandInfo entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String nameCn = entity.getNameCn();
        if (nameCn != null) {
            stmt.bindString(2, nameCn);
        }
 
        String nameEn = entity.getNameEn();
        if (nameEn != null) {
            stmt.bindString(3, nameEn);
        }
 
        String drugId = entity.getDrugId();
        if (drugId != null) {
            stmt.bindString(4, drugId);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(5, companyId);
        }
        
        
        String adminRouteId = entity.getAdminRouteId();
        if (adminRouteId != null) {
            stmt.bindString(6, adminRouteId);
        }
        
        String formulationId = entity.getFormulationId();
        if (formulationId != null) {
            stmt.bindString(7, formulationId);
        }
        
        String orderDate = entity.getOrderDate();
        if (orderDate != null) {
            stmt.bindString(8, orderDate);
        }
 
        String changeDate = entity.getChangeDate();
        if (changeDate != null) {
            stmt.bindString(9, changeDate);
        }
    }

    @Override
    protected void attachEntity(BrandInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BrandInfo readEntity(Cursor cursor, int offset) {
        BrandInfo entity = new BrandInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nameCn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nameEn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // drugId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // companyId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // adminRouteId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // formulationId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // orderDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // changeDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BrandInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNameCn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNameEn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDrugId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompanyId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdminRouteId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFormulationId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrderDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChangeDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BrandInfo entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BrandInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    
    public synchronized List<BrandInfo> _queryBrandInfoList(String drugId,String adminRouteId) {
        if(TextUtils.isEmpty(adminRouteId))
        	return _queryDrugInfo_BrandInfoList(drugId);
        return _queryDrugInfo_BrandInfoList(drugId,adminRouteId);
    }
    
    /** Internal query to resolve the "brandInfoList" to-many relationship of DrugInfo. */
    public synchronized List<BrandInfo> _queryDrugInfo_BrandInfoList(String drugId) {
        if (drugInfo_BrandInfoListQuery == null) {
            QueryBuilder<BrandInfo> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.DrugId.eq(drugId));
            drugInfo_BrandInfoListQuery = queryBuilder.build();
        } else {
            drugInfo_BrandInfoListQuery.setParameter(0, drugId);
        }
        return drugInfo_BrandInfoListQuery.list();
    }
    
    public synchronized List<BrandInfo> _queryDrugInfo_BrandInfoList(String drugId,String adminRouteId) {
        if (drugInfo_BrandInfoListQuery1 == null) {
            QueryBuilder<BrandInfo> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.DrugId.eq(drugId));
            queryBuilder.where(Properties.AdminRouteId.eq(adminRouteId));
            queryBuilder.orderAsc(Properties.OrderDate);
            drugInfo_BrandInfoListQuery1 = queryBuilder.build();
        } else {
            drugInfo_BrandInfoListQuery1.setParameter(0, drugId);
            drugInfo_BrandInfoListQuery1.setParameter(1, adminRouteId);
        }
        
        return drugInfo_BrandInfoListQuery1.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCompanyInfoDao().getAllColumns());
            builder.append(" FROM BrandInfo T");
            builder.append(" LEFT JOIN CompanyInfo T0 ON T.'CompanyID'=T0.'CompanyID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BrandInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        BrandInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;
        CompanyInfo companyInfo = loadCurrentOther(daoSession.getCompanyInfoDao(), cursor, offset);
        entity.setCompanyInfo(companyInfo);
        return entity;    
    }

    public BrandInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BrandInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BrandInfo> list = new ArrayList<BrandInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BrandInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BrandInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
