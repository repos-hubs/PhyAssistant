package com.jibo.dao;

import java.util.Collections;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.jibo.common.Util;
import com.jibo.entity.SearchDrug;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table SearchDictionary.
 */
public class SearchDrugDao extends AbstractDao<SearchDrug, Void> {

	public static final String TABLENAME = "SearchDictionary";

	/**
	 * Properties of entity SearchDrug.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property DrugId = new Property(0, String.class,
				"drugId", false, "DrugID");
		public final static Property Key = new Property(1, String.class, "key",
				false, "AlternativeName");
		public final static Property ChangeDate = new Property(2, String.class,
				"changeDate", false, "ChangeDate");
	};

	public SearchDrugDao(DaoConfig config) {
		super(config);
	}

	public SearchDrugDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'SearchDictionary' (" + //
				"'DrugID' TEXT," + // 0: drugId
				"'AlternativeName' TEXT," + // 1: key
				"'ChangeDate' TEXT);"); // 2: changeDate
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'SearchDictionary'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, SearchDrug entity) {
		stmt.clearBindings();

		String drugId = entity.getDrugId();
		if (drugId != null) {
			stmt.bindString(1, drugId);
		}

		String key = entity.getKey();
		if (key != null) {
			stmt.bindString(2, key);
		}

		String changeDate = entity.getChangeDate();
		if (changeDate != null) {
			stmt.bindString(3, changeDate);
		}
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}

	/** @inheritdoc */
	@Override
	public SearchDrug readEntity(Cursor cursor, int offset) {
		SearchDrug entity = new SearchDrug(
				//
				cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // drugId
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // key
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // changeDate
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, SearchDrug entity, int offset) {
		entity.setDrugId(cursor.isNull(offset + 0) ? null : cursor
				.getString(offset + 0));
		entity.setKey(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setChangeDate(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(SearchDrug entity, long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(SearchDrug entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
