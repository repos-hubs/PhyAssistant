package com.jibo.dao;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.text.TextUtils;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.QueryBuilder;

import com.jibo.entity.ContactManufuture;
import com.jibo.entity.Hospital;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table hospital_name.
 */
public class HospitalDao extends AbstractDao<Hospital, Long> {

	public static final String TABLENAME = "hospital_name";

	/**
	 * Properties of entity Hospital.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "id");
		public final static Property Name = new Property(1, String.class,
				"name", false, "name");
		public final static Property NamePY = new Property(2, String.class,
				"namePy", false, "namePY");
		public final static Property TierName = new Property(3, String.class,
				"tierName", false, "tier");
		public final static Property TierEnName = new Property(4, String.class,
				"tierEnName", false, "tierEN");
		public final static Property TierLevel = new Property(5, Integer.class,
				"tierLevel", false, "tier_level");
		public final static Property ProvinceName = new Property(6,
				String.class, "provinceName", false, "add_province");
		public final static Property CityName = new Property(7, String.class,
				"cityName", false, "add_city");
		public final static Property CountyName = new Property(8, String.class,
				"countyName", false, "add_county");
		public final static Property StreetName = new Property(9, String.class,
				"streetName", false, "add_street");
	};

	public HospitalDao(DaoConfig config) {
		super(config);
	}

	public HospitalDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Hospital entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String name = entity.getName();
		if (name != null) {
			stmt.bindString(2, name);
		}

		String namePy = entity.getNamePY();
		if (namePy != null) {
			stmt.bindString(3, namePy);
		}

		String tierName = entity.getTierName();
		if (tierName != null) {
			stmt.bindString(4, tierName);
		}

		String tierEnName = entity.getTierEnName();
		if (tierEnName != null) {
			stmt.bindString(5, tierEnName);
		}

		Integer tierLevel = entity.getTierLevel();
		if (tierLevel != null) {
			stmt.bindLong(6, tierLevel);
		}

		String provinceName = entity.getProvinceName();
		if (provinceName != null) {
			stmt.bindString(7, provinceName);
		}

		String cityName = entity.getCityName();
		if (cityName != null) {
			stmt.bindString(8, cityName);
		}

		String countyName = entity.getCountyName();
		if (countyName != null) {
			stmt.bindString(9, countyName);
		}

		String streetName = entity.getStreetName();
		if (streetName != null) {
			stmt.bindString(10, streetName);
		}
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Hospital readEntity(Cursor cursor, int offset) {
		Hospital entity = new Hospital(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // namePy
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tierName
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tierEnName
				cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // tierLevel
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // provinceName
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cityName
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 8), // countyName
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 9) // streetName
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Hospital entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setName(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setNamePY(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setTierName(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setTierEnName(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setTierLevel(cursor.isNull(offset + 5) ? null : cursor
				.getInt(offset + 5));
		entity.setProvinceName(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setCityName(cursor.isNull(offset + 7) ? null : cursor
				.getString(offset + 7));
		entity.setCountyName(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
		entity.setStreetName(cursor.isNull(offset + 9) ? null : cursor
				.getString(offset + 9));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(Hospital entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Hospital entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	public List<Hospital> queryDeep(String province, String city, String key) {
		QueryBuilder<Hospital> builder = queryBuilder();
		builder.where(Properties.ProvinceName.eq(province),
				Properties.CityName.eq(city));
		if (!TextUtils.isEmpty(key)) {
			builder.where(Properties.Name.like("%" + key + "%"));
		}
		builder.orderDesc(Properties.TierLevel);
		List<Hospital> list = builder.list();

		/** °´Æ´ÒôÊ××ÖÄ¸ÅÅÐò */
		Collections.sort(list, new Comparator<Hospital>() {
			@Override
			public int compare(Hospital obj1, Hospital obj2) {
				return ((int) obj1.getNamePY().charAt(0))
						- ((int) obj2.getNamePY().charAt(0));
			}
		});

		return list;
	}
}
