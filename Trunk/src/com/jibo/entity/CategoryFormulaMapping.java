package com.jibo.entity;

import com.jibo.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.jibo.dao.CategoryFormulaMappingDao;
import com.jibo.dao.FormulaCategoryDao;
import com.jibo.dao.FormulaDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table category_formula_mapping.
 * 
 *  * 医学公式模块 - 公式分类<->公式的关联关系表 （Many-to-Many）
 * 
 */
public class CategoryFormulaMapping {

    private Integer id;
    private int categoryId;
    private int formulaId;
    private Integer order;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CategoryFormulaMappingDao myDao;

    private FormulaCategory formulaCategory;
    private Integer formulaCategory__resolvedKey;

    private Formula formula;
    private Integer formula__resolvedKey;


    public CategoryFormulaMapping() {
    }

    public CategoryFormulaMapping(Integer id) {
        this.id = id;
    }

    public CategoryFormulaMapping(Integer id, int categoryId, int formulaId, Integer order) {
        this.id = id;
        this.categoryId = categoryId;
        this.formulaId = formulaId;
        this.order = order;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCategoryFormulaMappingDao() : null;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public int getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(int categoryId) {
        this.categoryId = categoryId;
    }

    public int getFormulaId() {
        return formulaId;
    }

    public void setFormulaId(int formulaId) {
        this.formulaId = formulaId;
    }

    public Integer getOrder() {
        return order;
    }

    public void setOrder(Integer order) {
        this.order = order;
    }

    /** To-one relationship, resolved on first access. */
    public FormulaCategory getFormulaCategory() {
        if (formulaCategory__resolvedKey == null || !formulaCategory__resolvedKey.equals(categoryId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FormulaCategoryDao targetDao = daoSession.getFormulaCategoryDao();
            formulaCategory = targetDao.load(categoryId);
            formulaCategory__resolvedKey = categoryId;
        }
        return formulaCategory;
    }

    public void setFormulaCategory(FormulaCategory formulaCategory) {
        if (formulaCategory == null) {
            throw new DaoException("To-one property 'categoryId' has not-null constraint; cannot set to-one to null");
        }
        this.formulaCategory = formulaCategory;
        categoryId = formulaCategory.getId();
        formulaCategory__resolvedKey = categoryId;
    }

    /** To-one relationship, resolved on first access. */
    public Formula getFormula() {
        if (formula__resolvedKey == null || !formula__resolvedKey.equals(formulaId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FormulaDao targetDao = daoSession.getFormulaDao();
            formula = targetDao.load(formulaId);
            formula__resolvedKey = formulaId;
        }
        return formula;
    }

    public void setFormula(Formula formula) {
        if (formula == null) {
            throw new DaoException("To-one property 'formulaId' has not-null constraint; cannot set to-one to null");
        }
        this.formula = formula;
        formulaId = formula.getId();
        formula__resolvedKey = formulaId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

	@Override
	public String toString() {
		return null!=formula?formula.toString():"";
	}
    
}
