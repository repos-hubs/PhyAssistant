package com.jibo.entity;

import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.util.Log;

import com.jibo.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.jibo.dao.ContactManufutureDao;
import com.jibo.dao.ManufutureBrandInfoDao;
import com.jibo.data.entity.NewsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table manufuture_info.
 * 
 * 联系厂商基本数据主表
 * 
 */
public class ContactManufuture implements Parcelable{

	private Long id;
    private String brandId;
    private String productInfo;
    private String position;
    private String intro;
    private String worktime;
    private String place;
    private String chinesename;//联系人中文名
    private String englishname;
    private String telphone;//联系电话
    private String phone;
    private String email;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContactManufutureDao myDao;

    private ManufutureBrandInfo manufutureBrandInfo;
    private String manufutureBrandInfo__resolvedKey;


    public ContactManufuture() {
    }

    public ContactManufuture(Long id) {
        this.id = id;
    }

    public ContactManufuture(Long id, String brandId, String productInfo, String position, String intro, String worktime, String place, String chinesename, String englishname, String telphone, String phone, String email) {
        this.id = id;
        this.brandId = brandId;
        this.productInfo = productInfo;
        this.position = position;
        this.intro = intro;
        this.worktime = worktime;
        this.place = place;
        this.chinesename = chinesename;
        this.englishname = englishname;
        this.telphone = telphone;
        this.phone = phone;
        this.email = email;
    }
    
    public static final Parcelable.Creator<ContactManufuture> CREATOR = new Creator<ContactManufuture>() {
		public ContactManufuture createFromParcel(Parcel source) {
			Log.i("dd", "createFromParcel:" + source);
			ContactManufuture entity = new ContactManufuture();
			entity.id = source.readLong();
			entity.brandId = source.readString();
			entity.productInfo = source.readString();
			entity.position = source.readString();
			entity.intro = source.readString();
			entity.worktime = source.readString();
			entity.place = source.readString();
			entity.chinesename = source.readString();
			entity.englishname = source.readString();
			entity.telphone = source.readString();
			entity.phone = source.readString();
			entity.email = source.readString();
			return entity;
		}

		public ContactManufuture[] newArray(int size) {
			return new ContactManufuture[size];
		}
	};

	@Override
	public void writeToParcel(Parcel dest, int flags) {
		dest.writeLong(id);
		dest.writeString(brandId);
	    dest.writeString(productInfo);
	    dest.writeString(position);
	    dest.writeString(intro);
	    dest.writeString(worktime);
	    dest.writeString(place);
	    dest.writeString(chinesename);
	    dest.writeString(englishname);
	    dest.writeString(telphone);
	    dest.writeString(phone);
	    dest.writeString(email);
	}

	@Override
	public int describeContents() {
		return 0;
	}
    
    

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContactManufutureDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getBrandId() {
        return brandId;
    }

    public void setBrandId(String brandId) {
        this.brandId = brandId;
    }

    public String getProductInfo() {
        return productInfo;
    }

    public void setProductInfo(String productInfo) {
        this.productInfo = productInfo;
    }

    public String getPosition() {
        return position;
    }

    public void setPosition(String position) {
        this.position = position;
    }

    public String getIntro() {
        return intro;
    }

    public void setIntro(String intro) {
        this.intro = intro;
    }

    public String getWorktime() {
        return worktime;
    }

    public void setWorktime(String worktime) {
        this.worktime = worktime;
    }

    public String getPlace() {
        return place;
    }

    public void setPlace(String place) {
        this.place = place;
    }

    public String getChinesename() {
        return chinesename;
    }

    public void setChinesename(String chinesename) {
        this.chinesename = chinesename;
    }

    public String getEnglishname() {
        return englishname;
    }

    public void setEnglishname(String englishname) {
        this.englishname = englishname;
    }

    public String getTelphone() {
        return telphone;
    }

    public void setTelphone(String telphone) {
        this.telphone = telphone;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    /** To-one relationship, resolved on first access. */
    public ManufutureBrandInfo getManufutureBrandInfo() {
        if (manufutureBrandInfo__resolvedKey == null || manufutureBrandInfo__resolvedKey != brandId) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ManufutureBrandInfoDao targetDao = daoSession.getManufutureBrandInfoDao();
            manufutureBrandInfo = targetDao.load(brandId);
            manufutureBrandInfo__resolvedKey = brandId;
        }
        return manufutureBrandInfo;
    }

    public void setManufutureBrandInfo(ManufutureBrandInfo manufutureBrandInfo) {
        this.manufutureBrandInfo = manufutureBrandInfo;
        brandId = manufutureBrandInfo == null ? null : manufutureBrandInfo.getBrandId();
        manufutureBrandInfo__resolvedKey = brandId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
