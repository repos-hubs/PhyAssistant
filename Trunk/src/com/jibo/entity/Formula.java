package com.jibo.entity;

import java.util.List;
import com.jibo.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.jibo.dao.CalcSearchDao;
import com.jibo.dao.FormulaDao;
import com.jibo.dao.FormulaRankDao;
import com.jibo.dao.UnitsDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * 
 *  * 医学公式模块 - 公式主表
 *  
 * Entity mapped to table formula.
 */
public class Formula implements java.io.Serializable {

    /**
	 * 
	 */
	private static final long serialVersionUID = 6899690025672567478L;
	private Integer id;
    /** Not-null value. */
    private String name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FormulaDao myDao;

    private FormulaRank formulaRank;
    private Integer formulaRank__resolvedKey;

    private List<Units> unitsList;
    private List<CalcSearch> calcSearchList;

    public Formula() {
    }

    public Formula(Integer id) {
        this.id = id;
    }

    public Formula(Integer id, String name) {
        this.id = id;
        this.name = name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFormulaDao() : null;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** To-one relationship, resolved on first access. */
    public FormulaRank getFormulaRank() {
        if (formulaRank__resolvedKey == null || !formulaRank__resolvedKey.equals(id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FormulaRankDao targetDao = daoSession.getFormulaRankDao();
            formulaRank = targetDao.load(id);
            formulaRank__resolvedKey = id;
        }
        return formulaRank;
    }

    public void setFormulaRank(FormulaRank formulaRank) {
        this.formulaRank = formulaRank;
        id = formulaRank == null ? null : formulaRank.getId();
        formulaRank__resolvedKey = id;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Units> getUnitsList() {
        if (unitsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UnitsDao targetDao = daoSession.getUnitsDao();
            unitsList = targetDao._queryFormula_UnitsList(id);
        }
        return unitsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUnitsList() {
        unitsList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<CalcSearch> getCalcSearchList() {
        if (calcSearchList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CalcSearchDao targetDao = daoSession.getCalcSearchDao();
            calcSearchList = targetDao._queryFormula_CalcSearchList(id);
        }
        return calcSearchList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCalcSearchList() {
        calcSearchList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }
    
	@Override
	public String toString() {
		return name;
	}
    

}
