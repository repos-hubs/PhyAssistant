package com.jibo.entity;

import com.jibo.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.jibo.dao.DrugDetailInfoDao;
import com.jibo.dao.DrugDetailTypeInfoDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table InsertContent.
 * 
 * 药品详细内容表。关联详细记录DrugDetailInfo多对一
 */
public class DrugDetailTypeInfo implements java.io.Serializable {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private String id;//InsertId,关联DrugDetailInfo id 多对一
    private String content;//详细内容
    private String type;//类型，如：适应症，不良反应，用法用量...
    private String changeDate;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DrugDetailTypeInfoDao myDao;

    private DrugDetailInfo drugDetailInfo;
    private String drugDetailInfo__resolvedKey;


    public DrugDetailTypeInfo() {
    }

    public DrugDetailTypeInfo(String id, String content, String type, String changeDate) {
        this.id = id;
        this.content = content;
        this.type = type;
        this.changeDate = changeDate;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDrugDetailTypeInfoDao() : null;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getChangeDate() {
        return changeDate;
    }

    public void setChangeDate(String changeDate) {
        this.changeDate = changeDate;
    }

    /** To-one relationship, resolved on first access. */
    public DrugDetailInfo getDrugDetailInfo() {
        if (drugDetailInfo__resolvedKey == null || drugDetailInfo__resolvedKey != id) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DrugDetailInfoDao targetDao = daoSession.getDrugDetailInfoDao();
            drugDetailInfo = targetDao.load(id);
            drugDetailInfo__resolvedKey = id;
        }
        return drugDetailInfo;
    }

    public void setDrugDetailInfo(DrugDetailInfo drugDetailInfo) {
        this.drugDetailInfo = drugDetailInfo;
        id = drugDetailInfo == null ? null : drugDetailInfo.getId();
        drugDetailInfo__resolvedKey = id;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
